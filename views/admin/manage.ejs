<%- include('partials/head',{page: "manage"}) %>

<h2 class="title is-2">All Ice Creams</h2>
<div id="app">
<table class="table is-striped is-fullwidth" >
        <thead>
          <tr>
            <th>id</th>
            <th>Picture</th>
            <th>Name</th>
            <th>Price</th>
            <th>Stock</th>
            <th>Update</th>
            <th>Remove</th>
          </tr>
        </thead>
        <tbody>
    <% products.forEach((item,index)=> { %>

          <tr>
              <td><%-item.id %></td>
              <td>
                  <figure class="image is-96x96">
                      <img src="<%-baseUrl %>/uploads/<%-item.picture %>" alt="<%-item.name %>">
                  </figure>
            </td>
              <td><%-item.name %></td>
              <td><%-item.price %> <button class="button" @click="editprice(<%-item.id %>,'d<%-index %>')">Edit</button></td>
              <td><%-item.stock %> <button class="button" @click="editstock(<%-item.id %>,'d<%-index %>')">Edit</button></td>
              <td>
                <a href="<%-baseUrl %>/admin/edit/<%-item.id %>" class="button">Update product</a>
              </td>
              <td><button class="button" @click="confirmDelete(<%-item.id %>,'d<%-index %>')">Remove Product</button></td>
          </tr>
    <% }) %>
        </tbody>
      </table>
    </div>
      <script src="<%-baseUrl %>/js/vue.js"></script>
      <script src="<%-baseUrl %>/js/sweetalert2.all.min.js"></script>
      <script>
        new Vue({
          el: "#app",
          data: {
            <% products.forEach((item, index) => { %>
            d<%-index %>: {
              name: "<%- item.name %>",
              stock: <%- item.stock %>,
              price: <%- item.price %>
            },
            <% }) %>
          },
          methods: {
            editstock: function(id, did) {
              swal({
                title: 'Enter new stock details',
                input: 'text',
                inputValue: this[did].stock,
                inputAttributes: {
                  autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'Update',
                showLoaderOnConfirm: true,
                preConfirm: (newval) => {
                  return fetch(`<%-baseUrl%>/stock/update/${id}/${newval}`)
                    .then(response => {
                      if (!response.ok) {
                        throw new Error(response.statusText);
                      }
                      return response.text();
                    })
                    .catch(error => {
                      swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !swal.isLoading()
              }).then((result) => {
                console.log(result);
                window.location.reload();
              });
            },
            editprice: function(id, did) {
              swal({
                title: 'Enter new Prices',
                input: 'text',
                inputValue: this[did].price,
                inputAttributes: {
                  autocapitalize: 'off'
                },
                showCancelButton: true,
                confirmButtonText: 'Update',
                showLoaderOnConfirm: true,
                preConfirm: (newval) => {
                  return fetch(`<%-baseUrl%>/price/update/${id}/${newval}`)
                    .then(response => {
                      if (!response.ok) {
                        throw new Error(response.statusText);
                      }
                      return response.text();
                    })
                    .catch(error => {
                      swal.showValidationMessage(`Request failed: ${error}`);
                    });
                },
                allowOutsideClick: () => !swal.isLoading()
              }).then((result) => {
                console.log(result);
                window.location.reload();
              });
            },
            confirmDelete(id, did) {
              swal({
                title: 'Confirm Deletion',
                text: `Are you sure you want to remove ${this[did].name} ?`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Confirm',
                dangerMode: true
              }).then((result) => {
                if (result.value) {
                  // Check if the confirm button is pressed
                  this.deleteProduct(id, did);
                }
              });
            },
            deleteProduct(id, did) {
              fetch(`<%-baseUrl%>/product/delete/${id}`, {
                  method: 'DELETE'
                })
                .then(response => {
                  if (!response.ok) {
                    throw new Error(response.statusText);
                  }
                  return response.text();
                })
                .then(result => {
                  window.location.reload();
                })
                .catch(error => {
                  console.error(error);
                });
            }
          }
        });
        </script>
<%- include('partials/foot') %>
